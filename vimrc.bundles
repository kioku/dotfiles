if &compatible
  set nocompatible
end

" Shim command and function to allow migration from Vundle to vim-plug.
function! VundleToPlug(vundle_command, arg, ...)
  echom "You are using Vundle's `".a:vundle_command."` command to declare plugins. Dotfiles now uses vim-plug for plugin mangagement. Please rename uses of `".a:vundle_command."` to `Plug`. Plugin was '".a:arg."'."
  let vim_plug_options = {}

  if a:0 > 0
    if has_key(a:1, 'name')
      let name = a:1.name
      let vim_plug_options.dir = "$HOME/.vim/bundle/".a:1.name
    endif

    if has_key(a:1, 'rtp')
      let vim_plug_options.rtp = a:1.rtp
    endif
  endif

  Plug a:arg, vim_plug_options
endfunction

com! -nargs=+  -bar Plugin call VundleToPlug("Plugin", <args>)
com! -nargs=+  -bar Bundle call VundleToPlug("Bundle", <args>)

call plug#begin('~/.vim/plugged/')

" Define bundles via Github repos
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'hdima/python-syntax', {'for': 'python'}
Plug 'hynek/vim-python-pep8-indent', {'for': 'python'}
Plug 'nvie/vim-flake8', {'for': 'python'}
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'tpope/vim-fugitive'
Plug 'preservim/nerdcommenter'
Plug 'prabirshrestha/vim-lsp'

Plug 'othree/javascript-libraries-syntax.vim', {'for': 'javascript'}
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'Quramy/vim-js-pretty-template'
Plug 'leafgarland/typescript-vim', {'for': 'typescript'}
Plug 'Quramy/tsuquyomi', {'for': 'typescript'}
Plug 'Shougo/unite.vim', {'for': 'typescript'}
Plug 'Quramy/vim-dtsm', {'for': 'typescript'}

" Define some colorschemes
Plug 'wellsjo/wellsokai.vim'
Plug 'joshdick/onedark.vim'
Plug 'mkarmona/colorsbox'
Plug 'easysid/mod8.vim'
Plug 'AlessandroYorba/Sierra'
"Plug 'michalbachowski/vim-wombat256mod'

" Other plugins
" Plug 'marijnh/tern_for_vim', {'for': 'javascript'}
" Plug 'tpope/vim-repeat'
" Plug 'tpope/vim-surround'
" Plug 'ctrlpvim/ctrlp.vim'
" Plug 'pbrisbin/vim-mkdir'
" Plug 'scrooloose/syntastic'

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()
